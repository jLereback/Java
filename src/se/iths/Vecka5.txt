2022-09-20

Man kan bara ha en publik klass per fil
Om man ska ha flera klasser i samma fil måste man skriva såhär:
public class Klass {
}
class Klass2 {
}

En constructor för Klass2 utan parametrar ser ut såhär:
public class Klass {
    public Klass() {
    }
}

Override:
Har en metod i en superklass och har exakt samma metod i subklassen

Overload:
Har en metod i en superklass och har en metod med samma namn i subklassen men med andra parametrar

Fyra OOP (Objekt Orienterad Programmering) koncept:

Encapsulation
    Deklarera fält privata och accessa via publika get/set metoder
    Samla fält och metoder som jobbar med dessa fält i samma klass

Inheritance
    Låter en klass få egenskaperna (metoder och fält) från en annan klass genom att ärva den

Polymorphism
    Låter ett objekt ha många olika former. Vi kan låta en variabel av superklass typ referera till en subklass. Varje subklass kan ha sin egen implementation av metoder. I runtime kan rätt metod väljas att köra baserat på typ. Override
    I java är alla klasser polymorpha då de är minst två typer, sig själva och Objekt.

Abstraction
    Hanterar komplexitet genom att dölja onödig komplexitet för användaren.
    Vi kan använda och utöka med mer komplex logik ovanpå abstraktionen utan att behöva förstå den gömda komplexiteten.

KOMMER PÅ TENTAN!!!
Tillåter Java multipelt (flera) arv?
Svar: NEJ!!!


Override fungerar bara med icke-statiska metoder

OOP design principles - SOLID

Inte extenda rabatter i labben eftersom alla kanske har olika rabatter
Man kan istället ha en superklass som heter rabatt och sedan göra olika subklasser som motsvarar enskilda rabatter




instance är samma sak som ett objekt
Att instanciera betyder att man skapar ett nytt objekt
tex. new Animal();
Interface:

För att man inte ska kunna skapa ett nytt objekt av en klass kan man skapa ett interface istället

När man vill extenda ett interface skriver man implements istället för extend

Interface kan inte ärva en klass

Man kan implementera många interface

Ett interface kan i OOP inte innehålla kod, kan bara innehålla definitioner av metodnamn

Exempel på class:
public class Mammal {
    void talk() {
    }
}
public class Duck extends Mammal {
    public void talk() {
    }
}


Exempel på interface:
public interface Mammal {
    void talk();
}

public class Duck implements Mammal {
    public void talk() {
    }
}



Abstract class:

För att man inte ska kunna skapa ett nytt objekt av en klass kan man även använda sig av en abstract klass

Abstract betyder att den inte är implementerad än utan är teoretisk

Alltid använda en abstract klass när man inte vill att man ska kunna göra ett nytt objekt av klassen

För att kunna använda sig av metoden talk måste man först extenda klassen

I en abstract klass kan man ha både kod och fält till skillnad från interface

Superklassen ska i princip alltid vara abstract

Exempel:
public abstract class Mammal {
    abstract void talk() {
    }
}
public class Duck extends Mammal {
    public void talk() {
    }
}


Man kan förhindra att skapa ett nytt objekt av en klass genom att använda en private constructor

Vill man kunna skapa ett nytt objekt men inte tillåta att klassen ärvs kan man använda final class

Gå tillbaka och kolla på lektionen 2022-09-20 kl 13.29


